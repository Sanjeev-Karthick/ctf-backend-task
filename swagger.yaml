openapi: 3.0.0
info:
  title: CTF Task Backend API
  description: A simple documentation on ctf tech domain backend task for organisers
  version: 0.1
  contact:
    email: sanjugirish2008@gmail.com

servers:
  - url: "http://localhost:4000/api/v1"
    description: Local host server
    variables:
      version:
        enum:
          - v1
      protocol:
        enum:
          - http
paths:
  /signup:
    post:
      tags:
        - User
      summary: signup a new user. required values are - name, email, password and phone number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - phone
              properties:
                name:
                  type: string
                  required: true
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: number
      responses:
        200:
          description: Mail sent , Follow  the mail to complete the registeration process
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      phone:
                        type: object
                      _id:
                        type: string
                      createdAt:
                        type: string
        401:
          description: User already exist
        500:
          description: internal server error

  /login:
    post:
      tags:
        - User
      summary: login a new user. required values are -  email and password. Also adds httpOnly cookie in browser. It sends token in response too.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: number
                      _id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Email and Password required, Incorrect Password
        401:
          description: User doesnot exist, Registeration process not completed.  
        500:
          description: internal server error

  /logout:
    get:
      tags:
        - User
      summary: get request to logout the user. Also removes httpOnly cookies 
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  
        400:
          description: Bad request
        500:
          description: internal server error
  /product/all:
    get:
      tags:
        - Product
      summary: returns all Products
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    quantity:
                      type: number
        400:
          description: Bad request
        500:
          description: internal server error
    
  /product/search:

    get:
      tags:
      - "Product"
      summary: "Search product by name"
      description: "Returns a single product"
      parameters:
      - in: query
        name: name
        description: " of product to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "Return the product"
        "400":
          description: "Invalid name supplied"
        "404":
          description: "Product not found"


  /product/add:
    post:
      tags:
        - Product
      summary: Adding product to database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - quantity
              properties:
                name:
                  type: string
                  required: true
                quantity:
                  type: number
                  required: true
        
      responses:
        200:
          description: Product added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Unable to add product

  /product/update:
    put:
        tags:
        - "Product"
        summary: "Update a product's Quantity"
        description: "Updates a product's quantity for given id  "
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - quantity
                properties:
                  id:
                    type: string
                    required: true
                  quantity:
                    type: number
                    required: true
        responses:
          "200":
            description: "Product quantity has been successfully updated"
          "400":
            description: "Invalid ID supplied"
          "404":
            description: "Product not found"

  /product/delete:
    delete:
        tags:
        - "Product"
        summary: "Deletes a product"
        description: "Deletes a product with given ID"
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                    required: true
        responses:
          "200":
            description: "Product has been successfully deleted"
          "400":
            description: "Invalid ID supplied"
          "404":
            description: "Product not found"